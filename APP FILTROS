#!/usr/bin/env python
# coding: utf-8

# # DISEÑO DE FILTROS

# ****

# ### Daniela Rosa Villadiego Padilla 

# *****

# ### Natalia Rodriguez Carmona

# ******

# ### DECLARACIÓN DE FUNCIONES Y LIBRERÍAS

# In[30]:


#Librerias a usar 
import numpy as np # Libreria numerica
import matplotlib.pyplot as plt #Libreria para 
from scipy.io.wavfile import read #Lectura de Audio
from IPython.display import Audio #Escuchar Audio
import scipy.signal as sp #Libreria para señales
import sympy as sy
import librosa


# In[3]:


def grafica_Audio(t,y,audio,filtrado):
    """
    Funcion para graficar el audio en el dominio del tiempo, tiene como entrada:
        - t: Vector del eje x (tiempo)
        - y: Vector para graficar los valores del eje y ()
        - audio: el número del audio que estoy procesando para poder llevar el control de manera organizada
        - filtrado: una variable booleana para verificar si se filtro o no el audio e imprimir el titulo 
    """ 
    
    plt.figure(figsize = (15,4))
    if filtrado:
        plt.plot(t,y,color="#746AB0")
        plt.title("Señal filtrada del Audio {}".format(audio), fontsize=20) 
    else:
        plt.plot(t,y,color="#E83845")
        plt.title("Señal original del Audio {}".format(audio), fontsize=20)
    plt.xlabel("Tiempo (s)", fontsize=15)
    plt.ylabel("Amplitud", fontsize=15)
    plt.grid()
    plt.show() # Mostrar la grafica


# In[4]:


def espectro_Audio(freq,xfreq,audio):
    """
    Funcion para graficar el espectro de un audio original, tiene como entrada
        - freq: vector de frecuencias
        - xfrec: vector del espectro
        - audio: número de audio para impresión en el titulo     
    """
    plt.figure(figsize=(15,7)) #Tamaño de la figura 
    plt.plot(freq, np.abs(xfreq),c="#ff7700")
    plt.xlabel("Hz",fontsize=15)
    plt.ylabel("$|H(\omega)|$",fontsize=15)
    plt.title("Espectro original del Audio {}".format(audio), fontsize=20)
    plt.grid()
    plt.show()


# In[5]:


def espectro_Audio_Filtrado_fm(freq_fm,xfreq_fm,audio,fc1,fc2,):
    """
    Funcion para graficar el espectro de un audio con filtro pasa-banda
    con muestreo en frecuencia, tiene como entrada:
        - freq_fm: vector de frecuencias filtradas
        - xfrec_fm: vector del espectro filtrado
        - fc1: Frecuencia de corte inferior
        - Fc2: frecuencia de corte supereior
        - audio: número de audio para impresión en el titulo    
    """
    plt.figure(figsize=(15,7)) #Tamaño de la figura 
    plt.plot(freq_fm, np.abs(xfreq_fm)/max(abs(xfreq_fm)),c="#388E8E")
    plt.vlines(fc1, 0, 1, color='r', lw=2, linestyle='--',label='$F_{c1}$')
    plt.vlines(fc2, 0, 1, color='g', lw=2, linestyle='--',label='$F_{c2}$')
    plt.vlines(3000, 0, 1, color='b', lw=2, linestyle='--',label='$K=3$')
    plt.vlines(5000, 0, 1, color='b', lw=2, linestyle='--',label='$K=5$')
    plt.xlabel("Hz",fontsize=15)
    plt.ylabel("$|H(\omega)|$",fontsize=15)
    plt.title("Espectro filtrado del Audio {}".format(audio), fontsize=20)
    plt.xlim([-6000,6000])
    plt.legend()
    plt.grid()
    plt.show()


# ### Filtro FIR Pasa-Banda por muestreo de frecuencia

# In[6]:


# Filtro FIR PASA BANDA por muestreo en frecuencia

Fs_fm=13000 # Frecuencia de muestreo
N=13 #orden del filtro 
fc1=3700 # Frecuencia de corte 1
fc2=4300 # Frecuencia de corte 2

M = int(Fs_fm/N) # Es para los pasos de k-> k(1khz) 
print("Se tiene muestras cada: ",M,"Hz")
K =1 # limite de la sumatoria

if N%2 ==0:
    K=int(N/2 -1)# para un N par
else:
    K=int((N-1)/2) #Para un N impar


alfa = int((N-1)/2) #Constante

hk = [] #Coeficientes de mi ventana h para encontrar la ecuacion
n =np.arange(0,K+1)

# Lleno el vector de coeficientes hk para multiplicar
for i in range(K+1):
    if i*M < fc1 or i*M>fc2:
        hk.append(0)
    else:
        hk.append(1)
        
print("El vector H(k):",hk)

#se crea una funcion symbolica 
h = 1
n = sy.Symbol("n")

for i in range(1,int(K)):
    h+=2*hk[i]*sy.cos((2*np.pi*i*(n-alfa))/N)

h=(1/N)*h

#Array para sustituir valores de n de 0 a N/2 
hn_fm = np.array([])
for i in range(N):
    #Reemplazo la n completa para obtener los coeficientes del filtro
    hn_fm= np.append(hn_fm,float(h.subs(n,i)))

w_fm,Hh_fm = sp.freqz(hn_fm,1, whole = True, worN=1024) #Respuesta en frecuencia

for i in range(N//2):
    print("h({})".format(i),"= h({})".format(N-i-1)," = ",np.round(hn_fm[i],5))
print("h(6) =",np.round(hn_fm[6],5))

#Grafica de respuesta al impulso del filtro
plt.figure(figsize=(15,7))
plt.stem(hn_fm)
plt.title("Respuesta al impulso del filtro",fontsize=20)
plt.xlabel("Muestras",fontsize=15)
plt.ylabel("Amplitud",fontsize=15)
plt.grid()
plt.show()

# Gráfica en frecuencia del filtro 
plt.figure(figsize=(15,7))
plt.title('Respuesta en frecuencia del filtro pasa-banda por Muestreo en frecuencia', fontsize=20)
plt.plot((w_fm-np.pi)*Fs_fm/(2*np.pi), np.abs(np.fft.fftshift(Hh_fm)), label='$Filtro$')
plt.vlines(fc1, 0, 1.2, color='r', lw=2, linestyle='--',label='$F_{c1}$')
plt.vlines(fc2, 0, 1.2, color='g', lw=2, linestyle='--',label='$F_{c2}$')
plt.vlines(3000, 0, 1, color='b', lw=2, linestyle='--',label='$K=3$')
plt.vlines(5000, 0, 1, color='b', lw=2, linestyle='--',label='$K=5$')
plt.xlabel("$Frecuencia [Hz]$", fontsize=15)
plt.ylabel("$|H2(\omega)|$", fontsize=15)
plt.legend()
plt.grid()
plt.show()


# # ANÁLISIS ESPECTRAL 

# ### Audio 1

# In[7]:


# Señal original de Audio 1
file_audio1 = 'audio1.wav'  # Ruta del archivo con la señal

# Cargar el archivo con librosa
x_1, fs_1 = librosa.load(file_audio1, sr=None)

t1 = np.arange(0, len(x_1) / fs_1, 1.0 / fs_1)  # Vector de tiempo

# Ajustar el tamaño de la figura
plt.figure(figsize=(15, 5)) 

# Se grafica el audio en el tiempo
filtrado = False
plt.plot(t1, x_1)
plt.title('Señal Original de Audio 1')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.show()

# Reproductor señal de audio original
Audio(x_1, rate=fs_1)


# In[11]:


# Espectro del audio 1 original

xfreq1 = np.fft.fft(x_1) #Transformada Rapida de Fourier del audio
n_1 = np.size(xfreq1) #Vector de Frecuencias
freq1 = np.arange(-n_1/2, n_1/2)*fs_1/n_1#Vector de Frecuencias = np.size(xfreq1)
xfreq1 = np.fft.fftshift(xfreq1) #organizar el vector del espectro: 

#Graficar
espectro_Audio(freq1,np.abs(xfreq1)/max(abs(xfreq1)),1)


# In[9]:


# Aplicando filtro a señal de audio 1
y_1_fm = np.convolve(hn_fm, x_1, mode='same')  #Filtra la señal requerida
Y_1_fm = np.fft.fft(y_1_fm) #FFT de la señal filtrada para mostrarla más comodamente
freq_Y_fm_1 = np.fft.fftfreq(Y_1_fm.size)*Fs_fm #Vector de Frecuencias

#Se grafica el audio en el tiempo ya filtrado
filtrado=True
grafica_Audio(t1,y_1_fm,1,filtrado)
Audio(y_1_fm, rate=fs_1) # Reproductor señal de audio filtrado


# In[12]:


# Espectro del audio 1 filtrado
xfreq1_fm = np.fft.fft(y_1_fm)
#Vector de Frecuencias
n_1 = np.size(xfreq1)
#Vector de Frecuencias = np.size(xfreq1)
freq1_fm = np.arange(-n_1/2, n_1/2)*fs_1/n_1
#organizar el vector del espectro: 
xfreq1_fm = np.fft.fftshift(xfreq1_fm)

#Normalizar amplitud del vector

# Grafica
espectro_Audio_Filtrado_fm(freq1_fm,xfreq1_fm,1,fc1,fc2,)


# ### Audio 2

# In[13]:


# Señal original de Audio 2
file_audio2 = 'audio3.wav'  # Ruta del archivo con la señal

# Cargar el archivo con librosa
x_2, fs_2 = librosa.load(file_audio2, sr=None)

t2 = np.arange(0, len(x_2) / fs_2, 1.0 / fs_2)  # Vector de tiempo

# Ajustar el tamaño de la figura
plt.figure(figsize=(15, 5)) 

# Se grafica el audio en el tiempo
filtrado = False
plt.plot(t2, x_2)
plt.title('Señal Original de Audio 2')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.show()

# Reproductor señal de audio original
Audio(x_2, rate=fs_2)


# In[14]:


# Aplicando filtro a señal de audio
y_2_fm = np.convolve(hn_fm, x_2, mode='same') #Filtra la señal requerida
Y_2_fm = np.fft.fft(y_2_fm)   #FFT de la señal filtrada para mostrarla más comodamente
freq_Y_fm_2 = np.fft.fftfreq(Y_2_fm.size)*Fs_fm #Vector de Frecuencias

#Se grafica el audio en el tiempo ya filtrado
filtrado=True
grafica_Audio(t2,y_2_fm,2,filtrado)
Audio(y_2_fm, rate=fs_2) # Reproductor señal de audio filtrado


# In[15]:


# Espectro del audio 2 original

xfreq2 = np.fft.fft(x_2) #Transformada Rapida de Fourier del audio
n_2 = np.size(xfreq2) #Vector de Frecuencias
freq2 = np.arange(-n_2/2, n_2/2)*fs_2/n_2#Vector de Frecuencias = np.size(xfreq1)
xfreq2 = np.fft.fftshift(xfreq2) #organizar el vector del espectro: 

#Graficar
espectro_Audio(freq2,np.abs(xfreq2)/max(abs(xfreq2)),2)


# In[16]:


# Espectro del audio 2 filtrado

xfreq2_fm = np.fft.fft(y_2_fm)
#Vector de Frecuencias
n_2 = np.size(xfreq2)
#Vector de Frecuencias = np.size(xfreq1)
freq2_fm = np.arange(-n_2/2, n_2/2)*fs_2/n_2
#organizar el vector del espectro: 
xfreq2_fm = np.fft.fftshift(xfreq2_fm)

#Normalizar amplitud del vector

# Grafica
espectro_Audio_Filtrado_fm(freq2_fm,xfreq2_fm,2,fc1,fc2,)


# ### Filtro FIR Pasa-Bajas por el método de enventanado

# In[17]:


rp =0.003 #ripple dado 
rpdb=20*np.log10(rp) # ripple en db
print("El ripple en db:",rpdb) 


# Dado que el ripple en db es -50. 4575, se puede utilizar la ventana Hamming o Blackman, para este caso se usará la ventana blackman con el objetivo de disminuir el rizado. 

# ![image.png](attachment:image.png)

# Como el filtro es pasa-bajas se utiliza la siguiente respuesta del filtro ideal:

# ![image-2.png](attachment:image-2.png)

# In[18]:


#Diseño del filtro y encontrar orden
fm =250 # Ancho de banda de transición  
Fc=2000 # Frecuencia de corte
Fs_en=12000 #Frecuencia de muestreo
M = (6*Fs_en)/fm #Orden del filtro
wc = (2*np.pi*Fc)/Fs_en       #Frecuencia de corte normalizada en radianes

if(M%2 == 0):  #Lo hace impar
    M = M+1
M= int(M)
print('Orden del filtro Pasa-bajas: ', M)


# In[19]:


#Creación de a ventana
n = np.arange(-(M-1)/2,M/2)  #Vector de muestras
hi = (wc/np.pi)*np.sinc((wc*n)/np.pi) #Respuesta del filtro ideal
win = 0.42-0.5*np.cos(2*np.pi*np.arange(len(n))/(M-1))+0.08*np.cos(4*np.pi*np.arange(len(n))/(M-1)) #ventana Blackman
h = hi*win #Multiplico la respuesta ideal por la ventana
#print(h)
w_sv,Hh_sv = sp.freqz(hi,1, whole=True, worN=2048) #Respuesta en frecuencia del filtro sin eventanado
w, Hh = sp.freqz(h,1, whole=True, worN=2048) #Respuesta en frecuencia del filtro enventanado


# ### Respuesta con simetría positiva y causal

# In[20]:


print("los 5 primeros y 5 ultimos")
for i in range(0,6):
    print("win({})".format(i),"= win({})".format(M-i-1)," = ",win[i])
    print("h({})".format(i),"= h({})".format(M-i-1)," = ",h[i])


# ### Respuesta al Impulso

# In[21]:


n=np.arange(0,M,1) # tamaño vector temporal
plt.figure(figsize=(15,7))
plt.stem(n,hi)
plt.title("Respuesta del filtro ideal sin enventanado",fontsize=20)
plt.xlabel("Muestras",fontsize=15)
plt.ylabel("Amplitud",fontsize=15)
plt.grid()
plt.show()


# En el filtro pasa-bajas ideal sin el enventanado, se puede apreciar que la respuesta adquiere una amplitud en muestras que aportan poca potencia, de manera que se esperaria que la respuesta en frecuencia aparezca el fenomeno de Gibbs, tiene osciolaciones infinitas

# ### Ventana de Blackman

# In[22]:


# Grafica ventana Blackman
plt.figure(figsize=(15,7))
plt.plot(n,win)
plt.title("Ventana Blackman",fontsize=20)
plt.xlabel("Muestras",fontsize=15)
plt.ylabel("Amplitud",fontsize=15)
plt.grid()
plt.show()


# In[23]:


# Se imprime la ventana ya multiplicada por la ventana
plt.figure(figsize=(15,7))
plt.stem(n,h)
plt.title("Respuesta al impulso con enventanado",fontsize=20)
plt.xlabel("Muestras",fontsize=15)
plt.ylabel("Amplitud",fontsize=15)
plt.grid()
plt.show()


# ### Sin enventanado

# In[24]:


#Gráfica del filtro para mirar comportamiento sin enventanado
plt.figure(figsize=(15,7))
plt.title('Respuesta en frecuencia del Pasa-bajos sin enventanado', fontsize=18)
plt.plot((w_sv -np.pi)*Fs_en/(2*np.pi), np.abs(np.fft.fftshift(Hh_sv)), label='$Filtro$')
plt.vlines(Fc, 0, 1, color='r', lw=2, linestyle='--',label='$F_c$')
plt.vlines(Fc+fm/2, 0, 1, color='g', lw=2, linestyle='--',label='$F_c+fm/2$')
plt.vlines(Fc-fm/2, 0, 1, color='g', lw=2, linestyle='--',label='$F_c-fm/2$')
plt.xlim([-0,2500])
plt.xlabel("$Frecuencia [Hz]$", fontsize=18)
plt.ylabel("$|H2(\omega)|$", fontsize=18)
plt.legend()
plt.grid()
plt.show()


# ### Con enventanado

# In[25]:


#Gráfica del filtro para mirar comportamiento
plt.figure(figsize=(15,7))
plt.title('Respuesta en frecuencia del Pasa-bajos con enventanado', fontsize=18)
plt.plot((w-np.pi)*Fs_en/(2*np.pi), np.abs(np.fft.fftshift(Hh)), label='$Filtro$')
plt.vlines(Fc, 0, 1, color='r', lw=2, linestyle='--',label='$F_c$')
plt.vlines(Fc+fm/2, 0, 1, color='g', lw=2, linestyle='--',label='$F_c+fm/2$')
plt.vlines(Fc-fm/2, 0, 1, color='g', lw=2, linestyle='--',label='$F_c-fm/2$')
plt.xlim([-0,2500])
plt.xlabel("$Frecuencia [Hz]$", fontsize=18)
plt.ylabel("$|H2(\omega)|$", fontsize=18)
plt.legend()
plt.grid()
plt.show()


# De la grafica de la respuesta del filtro enventanado por la ventana de Blackman,se puede observar que se atenuaron los componentes que no aportaban a la señal , como se mencionó anteriormente en este caso dichas componentes se atenuaron, entonces se logra apreciar el efecto del enventanado ya que si se esperaría que en la respuesta en frecuencia desaparezca el fenomeno de Gibbs, ya aqui no se tiene las oscilaciones infinitas.

# Se puede observar como el realizar un enventanado, disminuye de manera impresionante un rizado que tiene el filtro, dando así como resultado un filtro mucho más estricto y mejor diseñado, que permite obtener mejores resultados.

# ### AUDIOS COMO ENTRADA A LOS FILTROS

# In[26]:


def espectro_Audio_Filtrado_env(freq,xfreq,audio,fc,fm):
    """
    Funcion para graficar el espectro de un audio con filtro pasa-baja
    con muestreo en frecuencia, tiene como entrada:
        - freq: vector de frecuencias filtradas
        - xfre: vector del espectro filtrado
        - fc: Frecuencia de corte del filtro
        - audio: número de audio para impresión en el titulo    
    """
    plt.figure(figsize=(15,7)) #Tamaño de la figura 
    plt.plot(freq, np.abs(xfreq)/max(abs(xfreq)),c="#388E8E")
    plt.vlines(fc, 0, 1, color='r', lw=2, linestyle='--', label='$F_c$')
    plt.vlines(fc+fm/2, 0, 1, color='m', lw=2, linestyle='--', label='$F_c+f_m/2$')
    plt.vlines(fc-fm/2, 0, 1, color='m', lw=2, linestyle='--', label='$F_c-f_m/2$')
    plt.xlabel("Hz",fontsize=15)
    plt.ylabel("$|H(\omega)|$",fontsize=15)
    plt.title("Espectro filtrado del Audio {}".format(audio), fontsize=20)
    plt.xlim([-2500,2500])
    plt.legend()
    plt.grid()
    plt.show()


# ### Audio 1 

# In[27]:


#Se grafica el audio en el tiempo 
filtrado=False
grafica_Audio(t1,x_1,1,filtrado)
Audio(x_1, rate=fs_1) # Reproductor señal de audio original


# In[28]:


#Graficar espectro original del audio 1
espectro_Audio(freq1,np.abs(xfreq1)/max(abs(xfreq1)),1)


# In[31]:


# Aplicando filtro a señal de audio
y_1 = np.convolve(h, x_1, mode='same') #Filtra la señal requerida
Y_1 = np.fft.fft(y_1)   #FFT de la señal filtrada para mostrarla más comodamente
freq_Y = np.fft.fftfreq(Y_1.size)*Fs_en #Vector de Frecuencias

#Grafica
#Se grafica el audio en el tiempo ya filtrado
filtrado=True
grafica_Audio(t1,y_1,1,filtrado)
Audio(y_1, rate=fs_1) # Reproductor señal de audio filtrado


# In[32]:


#Transformada Rapida de Fourier del audio
xfreq1 = np.fft.fft(y_1)
#Vector de Frecuencias
n_1 = np.size(xfreq1)
#Vector de Frecuencias = np.size(xfreq1)
freq1 = np.arange(-n_1/2, n_1/2)*fs_1/n_1

#organizar el vector del espectro: 
xfreq1 = np.fft.fftshift(xfreq1)

espectro_Audio_Filtrado_env(freq1,xfreq1,1,Fc,fm)


# ### Audio 2

# In[33]:


#Se grafica el audio en el tiempo 
filtrado=False
grafica_Audio(t2,x_2,2,filtrado)
Audio(x_2, rate=fs_2) # Reproductor señal de audio original


# In[34]:


#Grafica del espectro de audio 2
espectro_Audio(freq2,np.abs(xfreq2)/max(abs(xfreq2)),2)


# In[36]:


# Aplicando filtro a señal de audio
y_2 = np.convolve(h, x_2, mode='same')          #Filtra la señal requerida
Y_2 = np.fft.fft(y_2_fm)   #FFT de la señal filtrada para mostrarla más comodamente
freq_Y_2 = np.fft.fftfreq(Y_2.size)*Fs_en        #Vector de Frecuencias

#Se grafica el audio en el tiempo ya filtrado
filtrado=True
grafica_Audio(t2,y_2,2,filtrado)
Audio(y_2, rate=fs_2) # Reproductor señal de audio filtrado


# In[37]:


#Transformada Rapida de Fourier del audio
xfreq2 = np.fft.fft(y_2)
#Vector de Frecuencias
n_2 = np.size(xfreq2)
#Vector de Frecuencias = np.size(xfreq1)
freq2 = np.arange(-n_2/2, n_2/2)*fs_2/n_2

#organizar el vector del espectro: 
xfreq2 = np.fft.fftshift(xfreq2)

espectro_Audio_Filtrado_env(freq1,xfreq1,2,Fc,fm)


# Se nota que para ambos audios se aplica un filtro pasa bajas con una frecuencia de corte ligeramente superior a la especificada en el diseño. Esto se atribuye al uso de la ventana Blackman, que presenta una transición más suave entre la banda de paso y la banda de rechazo, resultando en un mayor roll-off. A pesar de esto, se evidencia auditiva y visualmente en el espectro que el filtro está atenuando las frecuencias superiores a $f_c=2000Hz$.

# In[ ]:
